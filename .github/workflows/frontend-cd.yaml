name: frontend-cd

on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    defaults:
      run:
        working-directory: starter/frontend
        
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
       
      # Install the dependencies.
      - run: npm ci 

      # Run the tests.
      - run: CI=true npm test 

      # Run the linter.
      - run: npm run lint 

  build:
    runs-on: ubuntu-latest
    needs: lint_and_test
    defaults:
      run:
        working-directory: starter/frontend

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v2
        with:
          node-version: '18.x'
       
      
      # Install dependencies.
      - run: npm ci

      # Configure AWS credentials. 
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
 
      
      # Set up kubectl.
      - run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.AWS_CLUSTER_NAME }}

      # Get LoadBalancer IP and set it as an environment variable
      - name: Get LoadBalancer IP
        id: get_ip
        run: |
          export MOVIE_API_URL=$(kubectl get svc backend -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          echo "MOVIE_API_URL=http://$MOVIE_API_URL" >> $GITHUB_ENV

      # Build the Docker image.
      - run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=${{ env.MOVIE_API_URL }} -t frontend:${{ github.sha }} .
          docker tag frontend:${{ github.sha }} ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
   
      # Configure AWS credentials. 
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        
      # Log in to Amazon ECR and push the Docker image.
      - run: |
          
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URI }}
          docker push ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: starter/frontend

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v2
      
      # Configure AWS credentials. 
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
 
      
      # Set up kubectl.
      - run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.AWS_CLUSTER_NAME }}

      - uses: imranismail/setup-kustomize@v2
      - run: |
          cd k8s
          kustomize edit set image frontend=${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
          kustomize build | kubectl apply -f -

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_URI: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend" 
  AWS_CLUSTER_NAME: "cluster" 
